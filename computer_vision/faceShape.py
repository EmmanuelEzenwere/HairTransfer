# **************************************************************************************************
# Copyright: Â© MagicMirror.ai, 6 June 2017
# Author: Nuel Ezenwere
# Description: Computer Vision Engineer at MagicMirror.ai
# **************************************************************************************************
# This script runs the re-trained Inception model to classify a single or a batch of images


import os
# import pathlib
# from datetime import datetime
import time

import matplotlib.pyplot as plt
import tensorflow as tf


# import subprocess
# from PIL import Image
# import sys
# import numpy as np
# import random


def plot_images(image, Caption1):
    """_summary_

    Args:
        image (_type_): _description_
        Caption1 (_type_): _description_
    """
    # plt.close()

    plt.rcParams['text.usetex'] = False
    plt.rcParams['font.size'] = 10
    plt.rcParams['font.family'] = 'Arial'

    fig, ax = plt.subplots(1, 1)
    ax.imshow(image)
    xlabel = Caption1
    ax.set_xlabel(xlabel)
    ax.set_xticks([])
    ax.set_yticks([])
    plt.show()


def getFaceShape(image_path):
    """

    :param image_path: string, full path to the image
    :return:
    """
    # ************ Parameters ****************
    # ****************************************
    # base_path is the folder containing the retrained_graph.pb and retrained_labels.txt files generated by retrain.py.
    base_path = os.path.dirname(__file__)
    model_path = base_path + '/models/face_shape_classifier/retrained_graph.pb'
    labels_path = base_path + '/models/face_shape_classifier/retrained_labels.txt'

    time_start = time.monotonic()
    config = tf.ConfigProto()
    config.gpu_options.allow_growth = True
    sess = tf.Session(config=config)

    # Loads label file, strips off carriage return
    label_lines = [line.rstrip() for line in tf.gfile.GFile(labels_path)]

    # Unpersists graph from file
    with tf.gfile.FastGFile(model_path, 'rb') as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
        _ = tf.import_graph_def(graph_def, name='')

    with tf.Session() as sess:
        # Feed the image_data as input to the graph and get first prediction
        softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')

        image_data = tf.gfile.FastGFile(image_path, 'rb').read()
        predictions = sess.run(softmax_tensor, {'DecodeJpeg/contents:0': image_data})

        # Sort to show labels of first prediction in order of confidence
        top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]

        shape_id = top_k[0]
        face_shape = label_lines[shape_id]

        sess.close()

    return face_shape
